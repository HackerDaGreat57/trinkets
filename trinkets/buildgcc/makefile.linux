# buildgcc Makefile for Linux (x86_64, arm64)
# Please run build[nrun].linux.{arch} instead of using this Makefile directly, unless if you know EXACTLY what you are doing.

CPP = g++ -D__DEBUG__
CC = gcc -D__DEBUG__
LDLIBS = -lncurses -lform -lmenu -lpanel -lboost_exception -lboost_program_options
CPPFLAGS = -Wall -Wextra -pedantic -pg -g3 -Os -flto -save-temps -std=gnu++23 -fdiagnostics-color=always -v
LIBS = -L _deps/ncurses/lib -L _deps/boost/stage/lib
INCS = -I _deps/ncurses/include -I _deps/boost
RM = rm -f

X86_64 = -march=x86-64
X86_64_BIN = bin/x86_64/bgcc
X86_64_OBJ = obj/x86_64/bgcc.o

ARM64 = -march=armv8-a
ARM64_BIN = bin/arm64/bgcc
ARM64_OBJ = obj/arm64/bgcc.o

.PHONY: all all-before all-after clean clean-custom x86_64 arm64

all: all-before (X86_64_BIN) (X86_64_OBJ) (ARM64_BIN) (ARM64_OBJ) all-after

clean: clean-custom
	${RM} $(X86_64_BIN) $(X86_64_OBJ) $(ARM64_BIN) $(ARM64_OBJ)

x86_64:
	mkdir -p bin
	mkdir -p bin/x86_64
	mkdir -p obj
	mkdir -p obj/x86_64
	$(CPP) -c src/bgcc.cpp -o obj/x86_64/bgcc.o $(CPPFLAGS) $(X86_64) $(LIBS) $(INCS) $(LDLIBS)
	$(CPP) $(X86_64_OBJ) -o $(X86_64_BIN) $(LIBS) $(INCS) $(LDLIBS)

arm64:
	mkdir -p bin
	mkdir -p bin/arm64
	mkdir -p obj
	mkdir -p obj/arm64
	$(CPP) -c src/bgcc.cpp -o obj/arm64/bgcc.o $(CPPFLAGS) $(ARM64) $(LIBS) $(INCS) $(LDLIBS)
	$(CPP) $(ARM64_OBJ) -o $(ARM64_BIN) $(LIBS) $(INCS) $(LDLIBS)