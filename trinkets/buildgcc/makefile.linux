# buildgcc Makefile for Linux
# Please run this file from the root directory (where src/ is considered a subdirectory)

CPP = g++ -D__DEBUG__
CC = gcc -D__DEBUG__
LDLIBS = # -lncursesw
FLAGS = -w -Wall -Wextra -pedantic -fpermissive -pg -g3 -Os -flto -save-temps -ansi
RM = rm -f

X86_64 = -march=x86-64
X86_64_BIN = bin/x86_64/bgcc
X86_64_OBJ = obj/x86_64/bgcc.o

ARM64 = -march=armv8-a
ARM64_BIN = bin/arm64/bgcc
ARM64_OBJ = obj/arm64/bgcc.o

.PHONY: all all-before all-after clean clean-custom x86_64 arm64

all: all-before (X86_64_BIN) (X86_64_OBJ) (ARM64_BIN) (ARM64_OBJ) all-after

clean: clean-custom
	${RM} $(X86_64_BIN) $(X86_64_OBJ) $(ARM64_BIN) $(ARM64_OBJ)

x86_64:
	mkdir -p bin
	mkdir -p bin/x86_64
	mkdir -p obj
	mkdir -p obj/x86_64
	$(CC) -c src/bgcc.c -o obj/x86_64/bgcc.o $(FLAGS) $(X86_64) $(LDLIBS)
	$(CPP) $(X86_64_OBJ) -o $(X86_64_BIN) $(LDLIBS)

arm64:
	mkdir -p bin
	mkdir -p bin/arm64
	mkdir -p obj
	mkdir -p obj/arm64
	$(CC) -c src/bgcc.c -o obj/arm64/bgcc.o $(FLAGS) $(ARM64) $(LDLIBS)
	$(CPP) $(ARM64_OBJ) -o $(ARM64_BIN) $(LDLIBS)